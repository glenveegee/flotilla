#!/bin/bash

scriptname="install" # the name of this script
forcesudo="yes" # whether the script requires to be ran with root privileges
pkgdeplist=( "libboost-system1.50.0" "libboost-filesystem1.50.0" "libboost-program-options1.50.0" "libboost-date-time1.50.0" ) # list of the dependencies

HOME=/home/$SUDO_USER
UPDATE_DB=false

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y|Y)$ ]]; then
            true
        else
            false
        fi
    fi
}

success() {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

warning() {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

newline() {
    echo ""
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        echo -e "Install must be run as root. Try 'sudo ./$scriptname'\n"
        exit 1
    fi
}

apt_pkg_req() {
    APT_CHK=$(dpkg-query -W -f='${Status}\n' $1 2> /dev/null | grep "install ok installed")

    if [ "" == "$APT_CHK" ]; then
        true
    else
        false
    fi
}

apt_pkg_install() {
    \curl -sS get.pimoroni.com/package | sudo bash -s - $1 || { warning "Sorry, Apt failed to install $1, I can't continue!" && exit 1; }
}

if [ $forcesudo == "yes" ]; then
    sudocheck
fi

if [ -f $HOME/.config/autostart/flotilla.desktop ]; then
    echo "Removing redundant file $HOME/.config/autostart/flotilla.desktop" && newline
    rm -f $HOME/.config/autostart/flotilla.desktop
fi

echo "Installing dependencies..." && newline

for pkgdep in ${pkgdeplist[@]}
    do if apt_pkg_req "$pkgdep" ; then
        UPDATE_DB=true
    fi
done

if $UPDATE_DB ; then
    echo "Updating package indexes..."
    sudo apt-get update
fi

for pkgdep in ${pkgdeplist[@]}
    do echo "Checking for dependencies..." && newline
    if apt_pkg_req "$pkgdep" ; then
        sudo apt-get --yes --force-yes install "$pkgdep"
    fi
done

if [ -f /usr/local/lib/libserialport.so.0.0.0 ]; then
    echo "libserialport already installed. Updating..." && newline
fi

cp ./dependencies/libs/libserialport* /usr/local/lib/

if [ ! -f /usr/local/lib/libserialport.so.0 ]; then
    ln -s /usr/local/lib/libserialport.so.0.0.0 /usr/local/lib/libserialport.so.0
fi

if [ ! -f /usr/local/lib/libserialport.so ]; then
    ln -s /usr/local/lib/libserialport.so.0.0.0 /usr/local/lib/libserialport.so
fi

chown root:staff /usr/local/lib/libserialport*
ldconfig

if [ ! -f /usr/bin/flotilla ]; then
    echo "Installing Flotilla daemon..." && newline
    cp flotilla /usr/bin/flotilla
    chmod +x /usr/bin/flotilla
else
    echo "Flotilla already installed. Updating..." && newline
    cp flotilla /usr/bin/flotilla
    chmod +x /usr/bin/flotilla
fi

if [ ! -f /etc/init.d/flotillad ]; then
    echo "Setting up init script..." && newline
    cp dependencies/flotillad /etc/init.d/
    chmod +x /etc/init.d/flotillad
    update-rc.d flotillad defaults
    /etc/init.d/flotillad start &
else
    echo "Init script already on system. Updating..." && newline
    cp dependencies/flotillad /etc/init.d/
    chmod +x /etc/init.d/flotillad
    update-rc.d flotillad defaults
    /etc/init.d/flotillad restart &
fi

echo "Installing Rockpool..." && newline

cp -r rockpool /opt
cp dependencies/rockpool /usr/sbin/
chmod +x /usr/sbin/rockpool
cp dependencies/rockpool.png /usr/share/pixmaps/
cp dependencies/rockpool.desktop /usr/share/applications/

echo "All done! Time to set sail." && newline

exit 0
